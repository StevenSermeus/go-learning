// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db_access

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createApplication = `-- name: CreateApplication :one
INSERT INTO application (name, pass_phrase, api_key, access_token_duration, refresh_token_duration) VALUES ($1, $2, $3, $4, $5) RETURNING id, name, pass_phrase, api_key, access_token_duration, refresh_token_duration
`

type CreateApplicationParams struct {
	Name                 string
	PassPhrase           string
	ApiKey               string
	AccessTokenDuration  int32
	RefreshTokenDuration int32
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, createApplication,
		arg.Name,
		arg.PassPhrase,
		arg.ApiKey,
		arg.AccessTokenDuration,
		arg.RefreshTokenDuration,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PassPhrase,
		&i.ApiKey,
		&i.AccessTokenDuration,
		&i.RefreshTokenDuration,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (application_id, username, pass, last_login) VALUES ($1, $2, $3, $4) RETURNING id, application_id, username, pass, last_login
`

type CreateUserParams struct {
	ApplicationID pgtype.UUID
	Username      string
	Pass          string
	LastLogin     pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ApplicationID,
		arg.Username,
		arg.Pass,
		arg.LastLogin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.Username,
		&i.Pass,
		&i.LastLogin,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE id = $1 RETURNING id, application_id, username, pass, last_login
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.Username,
		&i.Pass,
		&i.LastLogin,
	)
	return i, err
}

const getApplication = `-- name: GetApplication :one
SELECT id, name, pass_phrase, api_key, access_token_duration, refresh_token_duration FROM application WHERE id = $1
`

func (q *Queries) GetApplication(ctx context.Context, id pgtype.UUID) (Application, error) {
	row := q.db.QueryRow(ctx, getApplication, id)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PassPhrase,
		&i.ApiKey,
		&i.AccessTokenDuration,
		&i.RefreshTokenDuration,
	)
	return i, err
}

const getApplicationByAPIKey = `-- name: GetApplicationByAPIKey :one
SELECT id, name, pass_phrase, api_key, access_token_duration, refresh_token_duration FROM application WHERE api_key = $1
`

func (q *Queries) GetApplicationByAPIKey(ctx context.Context, apiKey string) (Application, error) {
	row := q.db.QueryRow(ctx, getApplicationByAPIKey, apiKey)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PassPhrase,
		&i.ApiKey,
		&i.AccessTokenDuration,
		&i.RefreshTokenDuration,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, application_id, username, pass, last_login FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.Username,
		&i.Pass,
		&i.LastLogin,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, application_id, username, pass, last_login FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.Username,
		&i.Pass,
		&i.LastLogin,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET application_id = $1, username = $2, pass = $3, last_login = $4 WHERE id = $5 RETURNING id, application_id, username, pass, last_login
`

type UpdateUserParams struct {
	ApplicationID pgtype.UUID
	Username      string
	Pass          string
	LastLogin     pgtype.Timestamp
	ID            pgtype.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ApplicationID,
		arg.Username,
		arg.Pass,
		arg.LastLogin,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.Username,
		&i.Pass,
		&i.LastLogin,
	)
	return i, err
}
